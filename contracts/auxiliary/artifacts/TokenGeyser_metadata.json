{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "stakingToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "distributionToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "maxUnlockSchedules",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startBonus_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bonusPeriodSec_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "initialSharesPerToken",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "total",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "durationSec",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "total",
						"type": "uint256"
					}
				],
				"name": "TokensLocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "total",
						"type": "uint256"
					}
				],
				"name": "TokensUnlocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "total",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BONUS_DECIMALS",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bonusPeriodSec",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDistributionToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStakingToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "durationSec",
						"type": "uint256"
					}
				],
				"name": "lockTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenToRescue",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "rescueFundsFromStakingPool",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "stakingToken",
						"type": "address"
					}
				],
				"name": "setDistributionToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "stakingToken",
						"type": "address"
					}
				],
				"name": "setStakingToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stakeFor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startBonus",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "supportsHistory",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalLocked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalLockedShares",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalStaked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "totalStakedFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalStakingShares",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalUnlocked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlockScheduleCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "unlockSchedules",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "initialLockedShares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unlockedShares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastUnlockTimestampSec",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endAtSec",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "durationSec",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlockTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstakeQuery",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateAccounting",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A smart-contract based mechanism to distribute tokens over time, inspired loosely by      Compound and Uniswap.      Distribution tokens are added to a locked pool in the contract and become unlocked over time      according to a once-configurable unlock schedule. Once unlocked, they are available to be      claimed by users.      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share      is a function of the number of tokens deposited as well as the length of time deposited.      Specifically, a user's share of the currently-unlocked pool equals their \"deposit-seconds\"      divided by the global \"deposit-seconds\". This aligns the new token distribution with long      term supporters of the project, addressing one of the major drawbacks of simple airdrops.      More background and motivation available at:      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md",
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"bonusPeriodSec_": "Length of time for bonus to increase linearly to max.",
						"distributionToken": "The token users receive as they unstake.",
						"initialSharesPerToken": "Number of shares to mint per staking token on first stake.",
						"maxUnlockSchedules": "Max number of unlock stages, to guard against hitting gas limit.",
						"stakingToken": "The token users deposit as stake.",
						"startBonus_": "Starting time bonus, BONUS_DECIMALS fixed point.                    e.g. 25% means user gets 25% of max distribution tokens."
					}
				},
				"getDistributionToken()": {
					"returns": {
						"_0": "The token users receive as they unstake."
					}
				},
				"getStakingToken()": {
					"returns": {
						"_0": "The token users deposit as stake."
					}
				},
				"lockTokens(uint256,uint256)": {
					"details": "This funcion allows the contract owner to add more locked distribution tokens, along      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking      linearly over the duraction of durationSec timeframe.",
					"params": {
						"amount": "Number of distribution tokens to lock. These are transferred from the caller.",
						"durationSec": "Length of time to linear unlock the tokens."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"rescueFundsFromStakingPool(address,address,uint256)": {
					"details": "Lets the owner rescue funds air-dropped to the staking pool.",
					"params": {
						"amount": "Amount of tokens to be rescued.",
						"to": "Address to which the rescued funds are to be sent.",
						"tokenToRescue": "Address of the token to be rescued."
					},
					"returns": {
						"_0": "Transfer success."
					}
				},
				"stake(uint256)": {
					"details": "Transfers amount of deposit tokens from the user.",
					"params": {
						"amount": "Number of deposit tokens to stake."
					}
				},
				"stakeFor(address,uint256)": {
					"details": "Transfers amount of deposit tokens from the caller on behalf of user.",
					"params": {
						"amount": "Number of deposit tokens to stake.",
						"user": "User address who gains credit for this stake operation."
					}
				},
				"supportsHistory()": {
					"returns": {
						"_0": "False. This application does not support staking history."
					}
				},
				"token()": {
					"details": "Note that this application has a staking token as well as a distribution token, which may be different. This function is required by EIP-900.",
					"returns": {
						"_0": "The deposit token used for staking."
					}
				},
				"totalLocked()": {
					"returns": {
						"_0": "Total number of locked distribution tokens."
					}
				},
				"totalStaked()": {
					"returns": {
						"_0": "The total number of deposit tokens staked globally, by all users."
					}
				},
				"totalStakedFor(address)": {
					"params": {
						"addr": "The user to look up staking information for."
					},
					"returns": {
						"_0": "The number of staking tokens deposited for addr."
					}
				},
				"totalUnlocked()": {
					"returns": {
						"_0": "Total number of unlocked distribution tokens."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unlockScheduleCount()": {
					"returns": {
						"_0": "Number of unlock schedules."
					}
				},
				"unlockTokens()": {
					"details": "Moves distribution tokens from the locked pool to the unlocked pool, according to the      previously defined unlock schedules. Publicly callable.",
					"returns": {
						"_0": "Number of newly unlocked distribution tokens."
					}
				},
				"unstake(uint256)": {
					"details": "Unstakes a certain amount of previously deposited tokens. User also receives their alotted number of distribution tokens.",
					"params": {
						"amount": "Number of deposit tokens to unstake / withdraw."
					}
				},
				"unstakeQuery(uint256)": {
					"params": {
						"amount": "Number of deposit tokens to unstake / withdraw."
					},
					"returns": {
						"_0": "The total number of distribution tokens that would be rewarded."
					}
				},
				"updateAccounting()": {
					"details": "A globally callable function to update the accounting state of the system.      Global state and state for the caller are updated.",
					"returns": {
						"_0": "[0] balance of the locked pool",
						"_1": "[1] balance of the unlocked pool",
						"_2": "[2] caller's staking share seconds",
						"_3": "[3] global staking share seconds",
						"_4": "[4] Rewards caller has accumulated, optimistically assumes max time-bonus.",
						"_5": "[5] block timestamp"
					}
				}
			},
			"title": "Token Geyser",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"../nft-lending-contracts/contracts/auxiliary/TokenGeyser.sol": "TokenGeyser"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"../nft-lending-contracts/contracts/auxiliary/TokenGeyser.sol": {
			"keccak256": "0xbfe43c1cdb7ce0f42541772954917ac1ec1485db38a169666038389da2c7831f",
			"license": "MIT",
			"urls": [
				"bzz-raw://983f33e12f4b4d03befdbbbf6fec6320e9cbc86d8791b230e9fcbadf608c1e42",
				"dweb:/ipfs/QmQZnFprXL8smpiu3WAB2DeB7GGGhaZddkQ9jUaCcN8wEA"
			]
		},
		"../nft-lending-contracts/contracts/openzeppelin-solidity/contracts/GSN/Context.sol": {
			"keccak256": "0xbc7f2f08b805e299fa2d5e702051171f670ded2808044dfeb6fab4357f167138",
			"license": "MIT",
			"urls": [
				"bzz-raw://53f7f10bb120dca002788bc57a82cb2b17178312ed95c55a378a77f9a0803ee3",
				"dweb:/ipfs/QmYPMCJo9HA9WuvkTaCHJVGipyXNUr3skeEVSXj3QJgc8U"
			]
		},
		"../nft-lending-contracts/contracts/openzeppelin-solidity/contracts/access/Ownable.sol": {
			"keccak256": "0x336031c76d8248a1a0f0f474d38e49b7858652453a98b7ff5c76d8f7d8528a13",
			"license": "MIT",
			"urls": [
				"bzz-raw://33b3b61915ec3e5c1367646630c7e164337be87ee79b0a1d94a39daac19c92ed",
				"dweb:/ipfs/QmZozz8CQ3Dc94CdLowLb7q2JsxfuNbKMkBjDxczSYNPUU"
			]
		},
		"../nft-lending-contracts/contracts/openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x03e8ca0e478ad13a646ac950c1095903f565abf6914d9608f665b269a8239efe",
			"license": "MIT",
			"urls": [
				"bzz-raw://f80fd7627b7524a434297757209861ccdc270473e6889b77a628e4aa0d6dcc76",
				"dweb:/ipfs/QmbbjLMnnLisxuJaPxoRJ8zSoQACk7dErtPKWWQ5Grkg66"
			]
		},
		"../nft-lending-contracts/contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xb1b439fbc95b6285b8a37a7c25bbfe77644b4706d8405709bd575a0e6d67191b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1c8fe1dd8140000fbbe4dd3899c15a20ea60d3ca1f9bff27ea21b9a2ff634e5a",
				"dweb:/ipfs/QmWgpKXT8syjcKdGtYUZjceghbSQmc9LVkzSYPxDwWrvnn"
			]
		}
	},
	"version": 1
}